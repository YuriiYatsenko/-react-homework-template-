{"version":3,"file":"static/js/895.f4c6986b.chunk.js","mappings":"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","sources":["components/Cinemania/MovieCard.jsx","components/Cinemania/MovieList.jsx","components/Cinemania/HomePage.jsx"],"sourcesContent":["import React from 'react';\nimport './MovieCard.css'; // Припустимо, що це файли стилів для MovieCard\n\nconst MovieCard = ({ movie }) => {\n  return (\n    <div className=\"movie-card\">\n      <img src={`https://image.tmdb.org/t/p/w200${movie.poster_path}`} alt={movie.title} />\n      <div className=\"info\">\n        <h2>{movie.title}</h2>\n        <p><strong>Release Date:</strong> {movie.release_date}</p>\n        <p><strong>Overview:</strong> {movie.overview}</p>\n        <p><strong>Original Title:</strong> {movie.original_title}</p>\n        <p><strong>Original Language:</strong> {movie.original_language}</p>\n        <p><strong>Popularity:</strong> {movie.popularity}</p>\n        <p><strong>Vote Average:</strong> {movie.vote_average}</p>\n        <p><strong>Vote Count:</strong> {movie.vote_count}</p>\n        <p><strong>Genres:</strong> {movie.genre_ids.map(genre => <span key={genre}>{genre}</span>)}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default MovieCard;\n\n\n\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport MovieCard from './MovieCard'; // Коректний імпорт MovieCard\nimport './MovieList.css'; // Додайте стилі для MovieList\n\nconst MovieList = () => {\n  const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    const fetchMovies = async () => {\n      try {\n        const response = await axios.get('https://api.themoviedb.org/3/trending/movie/day?api_key=e228a48ce493c266d1ac0e25cdb4d9c4');\n        setMovies(response.data.results); // assuming 'results' is the array of movies in the response\n      } catch (error) {\n        setMovies([]); // set empty array or handle error state as needed\n      }\n    };\n\n    fetchMovies();\n  }, []);\n\n  return (\n    <div className=\"movie-list\">\n      <h2>Movie List</h2>\n      <div className=\"movies-container\">\n        {movies.map(movie => (\n          <MovieCard key={movie.id} movie={movie} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default MovieList;\n\n\n\n","import React, { useEffect, useState } from 'react';\nimport MovieList from './MovieList';\nimport './HomePage.css';\n\nconst HomePage = () => {\n  const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    // Fetch trending movies\n    fetch('https://api.themoviedb.org/3/trending/movie/day?api_key=e228a48ce493c266d1ac0e25cdb4d9c4')\n      .then(response => {\n        return response.json();\n      })\n      .then(data => {\n        setMovies(data.results);\n      })\n      .catch(error => {\n      });\n  }, []);\n\n  return (\n    <div className=\"home-wrapper\">\n      <section>\n        <h1>Weekly Trends</h1>\n        <MovieList movies={movies} />\n      </section>\n      {/* Add other sections as necessary */}\n    </div>\n  );\n};\n\nexport default HomePage;\n\n"],"names":["_ref","movie","_jsxs","className","children","_jsx","src","concat","poster_path","alt","title","release_date","overview","original_title","original_language","popularity","vote_average","vote_count","genre_ids","map","genre","_useState","useState","_useState2","_slicedToArray","movies","setMovies","useEffect","fetchMovies","_asyncToGenerator","_regeneratorRuntime","_callee","response","_context","prev","next","axios","sent","data","results","t0","stop","apply","arguments","MovieCard","id","fetch","then","json","catch","error","MovieList"],"sourceRoot":""}